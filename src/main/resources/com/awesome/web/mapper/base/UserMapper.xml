<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.awesome.web.base.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.awesome.web.base.domain.User">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="mobile" jdbcType="VARCHAR" property="mobile" />
    <result column="office_phone" jdbcType="VARCHAR" property="office_phone" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="depart" jdbcType="VARCHAR" property="depart" />
    <result column="major" jdbcType="VARCHAR" property="major" />
    <result column="sex" jdbcType="INTEGER" property="sex" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="description" jdbcType="INTEGER" property="description" />
    <collection ofType="com.awesome.web.base.domain.Role" property="roles">
      <id column="role_id" property="id" />
      <result column="role_name" property="name" />
      <collection ofType="com.awesome.web.base.domain.Resource" property="resources">
        <id column="resource_id" property="id" />
        <result column="resource_name" property="name" />
        <result column="resource_url" property="url" />
      </collection>
    </collection>
  </resultMap>

  <!-- type为实体类User，包名已经配置，可以直接写类名 -->
  <resultMap id="userMap" type="com.awesome.web.base.domain.User">
    <id column="uid" property="uid" />
    <result column="username" property="username" />
    <result column="password" property="password" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <collection ofType="com.awesome.web.base.domain.Role" property="roles">
      <id column="role_id" property="id" />
      <result column="role_name" property="name" />
      <collection ofType="com.awesome.web.base.domain.Resource" property="resources">
        <id column="resource_id" property="id" />
        <result column="resource_name" property="name" />
        <result column="resource_url" property="url" />
      </collection>
    </collection>
  </resultMap>

  <sql id="Base_Column_List">
    uid, username, password, name, mobile, office_phone, email, depart, major, sex, status,description
  </sql>

  <!-- 根据username查询用户信息 -->
  <select id="findByUsername" parameterType="string" resultMap="userMap">
    SELECT u.*,
    ro.id role_id, ro.name role_name,
    re.id resource_id,re.name resource_name, re.url resource_url FROM user u
    left join user_role ur on ur.user_id= u.uid
    left join role ro on ro.id=ur.role_id
    left join role_resource rr on rr.role_id=ro.id
    left join resource re  on rr.resource_id=re.id
    WHERE u.username=#{username}
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
      u.*
      ,ro.id role_id, ro.name role_name
    from user u
    left join user_role ur on ur.user_id= u.uid
    left join role ro on ro.id=ur.role_id
    where u.uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.awesome.web.base.domain.User">
    insert into user (uid, username, password, 
      name, mobile, office_phone, 
      email, depart, major, 
      sex, status, description)
    values (#{uid,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{name,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR}, #{office_phone,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{depart,jdbcType=VARCHAR}, #{major,jdbcType=VARCHAR}, 
      #{sex,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{description,jdbcType=VARCHAR} )
  </insert>
  <insert id="insertSelective" parameterType="com.awesome.web.base.domain.User" useGeneratedKeys="true" keyProperty="uid">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        uid,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="mobile != null">
        mobile,
      </if>
      <if test="office_phone != null">
        office_phone,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="depart != null">
        depart,
      </if>
      <if test="major != null">
        major,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="description != null">
        description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="office_phone != null">
        #{office_phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="depart != null">
        #{depart,jdbcType=VARCHAR},
      </if>
      <if test="major != null">
        #{major,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.awesome.web.base.domain.User">
    update user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="office_phone != null">
        office_phone = #{office_phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="depart != null">
        depart = #{depart,jdbcType=VARCHAR},
      </if>
      <if test="major != null">
        major = #{major,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.awesome.web.base.domain.User">
    update user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      mobile = #{mobile,jdbcType=VARCHAR},
      office_phone = #{office_phone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      depart = #{depart,jdbcType=VARCHAR},
      major = #{major,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER}
      description = #{description,jdbcType=VARCHAR}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
</mapper>